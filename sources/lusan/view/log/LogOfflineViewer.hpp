#ifndef LUSAN_VIEW_LOG_LOGOFFLINEVIEWER_HPP
#define LUSAN_VIEW_LOG_LOGOFFLINEVIEWER_HPP
/************************************************************************
 *  This file is part of the Lusan project, an official component of the AREG SDK.
 *  Lusan is a graphical user interface (GUI) tool designed to support the development,
 *  debugging, and testing of applications built with the AREG Framework.
 *
 *  Lusan is available as free and open-source software under the MIT License,
 *  providing essential features for developers.
 *
 *  For detailed licensing terms, please refer to the LICENSE.txt file included
 *  with this distribution or contact us at info[at]aregtech.com.
 *
 *  \copyright   © 2023-2024 Aregtech UG. All rights reserved.
 *  \file        lusan/view/log/LogOfflineViewer.hpp
 *  \ingroup     Lusan - GUI Tool for AREG SDK
 *  \author      Artak Avetyan
 *  \brief       Lusan application, offline log viewer widget.
 *
 ************************************************************************/

#include "lusan/common/NELusanCommon.hpp"
#include "lusan/view/common/MdiChild.hpp"

/************************************************************************
 * Dependencies
 ************************************************************************/
class QHeaderView;
class QTableView;
class QLabel;
class QWidget;
class LogOfflineModel;
class MdiMainWindow;

namespace Ui {
    class LogOfflineViewer;
}

/**
 * \brief   Offline log viewer MDI window for viewing log files (.sqlog)
 **/
class LogOfflineViewer : public MdiChild
{
    Q_OBJECT

public:
    /**
     * \brief   Returns the file extension of the offline log files.
     **/
    static const QString& fileExtension(void);

//////////////////////////////////////////////////////////////////////////
// Constructor
//////////////////////////////////////////////////////////////////////////
public:

    /**
     * \brief   Constructor.
     * \param   wndMain    The main window of the application.
     * \param   filePath   The path to the .sqlog file to open.
     * \param   parent     The parent widget.
     **/
    explicit LogOfflineViewer(MdiMainWindow *wndMain, const QString& filePath, QWidget *parent = nullptr);

//////////////////////////////////////////////////////////////////////////
// Operations
//////////////////////////////////////////////////////////////////////////
public:
    /**
     * \brief   Returns true if the offline log database is successfully opened.
     **/
    bool isDatabaseOpen(void) const;

//////////////////////////////////////////////////////////////////////////
// Slots.
//////////////////////////////////////////////////////////////////////////
private slots:

    /**
     * \brief   Slot, triggered when make mouse right click on header.
     **/
    void onHeaderContextMenu(const QPoint& pos);

    /**
     * \brief   Slot, triggered when make mouse right click on table view
     **/
    void onTableContextMenu(const QPoint& pos);

    /**
     * \brief   Slot, triggered when database is successfully opened.
     **/
    void onDatabaseOpened(const QString& dbPath);

    /**
     * \brief   Slot, triggered when database is closed.
     **/
    void onDatabaseClosed(const QString& dbPath);

private:
    //!< Returns the pointer to the log table object.
    QTableView* ctrlTable(void);

    //!< Returns the pointer to the header object.
    QHeaderView* ctrlHeader(void);

    //!< Returns Logging File name label widget.
    QLabel* ctrlFile(void);

    /**
     * \brief   Populates menu and sets the action handlers.
     **/
    void populateColumnsMenu(QMenu* menu, int curRow);
    
    /**
     * \brief   Resets the order of the columns.
     **/
    void resetColumnOrder();
    
//////////////////////////////////////////////////////////////////////////
// Member variables
//////////////////////////////////////////////////////////////////////////
private:
    Ui::LogOfflineViewer*   ui;         //!< User interface object, generated by Qt Designer.
    LogOfflineModel*        mLogModel;  //!< Model for the offline log viewer, handling the data and its representation.
    QWidget*                mMdiWindow; //!< MDI window widget, used for displaying the log viewer in a multi-document interface.
    QString                 mFilePath;  //!< Path to the .sqlog file being viewed.
};

#endif // LUSAN_VIEW_LOG_LOGOFFLINEVIEWER_HPP